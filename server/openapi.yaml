openapi: 3.0.1
info:
  title: Asteroid API
  version: v1.0.0
  description: Version 1 of the Asteroid API

servers:
  - url: /api/v1
    description: Version 1 of the Asteroid API

paths:
  /openapi.yaml:
    get:
      summary: Get the OpenAPI schema
      operationId: GetOpenAPI
      responses:
        "200":
          description: OpenAPI schema
      tags:
        - API
  /swagger-ui:
    get:
      summary: Get the Swagger UI
      operationId: GetSwaggerDocs
      responses:
        "200":
          description: Swagger UI
      tags:
        - API

  /project:
    get:
      summary: Get all projects
      operationId: GetProjects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
      tags:
        - Project
    post:
      summary: Create a new project
      operationId: CreateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                run_result_tags:
                  type: array
                  items:
                    type: string
              required:
                - name
                - run_result_tags
      responses:
        "200":
          description: Project found
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "201":
          description: Project created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Project

  /project/{projectId}:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a project
      operationId: GetProject
      responses:
        "200":
          description: Project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Project

  /project/{projectId}/tasks:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all tasks for a project
      operationId: GetProjectTasks
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Task
    post:
      summary: Create a new task
      operationId: CreateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                type: string
                format: uuid
      tags:
        - Task

  /task/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a task
      operationId: GetTask
      responses:
        "200":
          description: Task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
      tags:
        - Task

  /task/{taskId}/run:
    parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all runs for a task
      operationId: GetTaskRuns
      responses:
        "200":
          description: List of runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Run"
      tags:
        - Run
    post:
      summary: Create a new run for a task
      operationId: CreateRun
      responses:
        "201":
          description: Run created
          content:
            application/json:
              schema:
                type: string
                format: uuid
      tags:
        - Run

  /run/{runId}/tool:
    parameters:
      - name: runId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all tools for a run
      operationId: GetRunTools
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      tags:
        - Tool
    post:
      summary: Create a new tool for a run
      operationId: CreateRunTool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                attributes:
                  type: object
                ignored_attributes:
                  type: array
                  items:
                    type: string
                code:
                  type: string
              required:
                - name
                - description
                - attributes
                - code
      responses:
        "200":
          description: Tool found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
        "201":
          description: Tool created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
      tags:
        - Tool

  /supervisor/{supervisorId}:
    parameters:
      - name: supervisorId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a supervisor
      operationId: GetSupervisor
      responses:
        "200":
          description: Supervisor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supervisor"
      tags:
        - Supervisor

  /project/{projectId}/supervisor:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all supervisors
      operationId: GetSupervisors
      responses:
        "200":
          description: List of supervisors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supervisor"
      tags:
        - Supervisor
    post:
      summary: Create a new supervisor
      operationId: CreateSupervisor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Supervisor"
      responses:
        "201":
          description: Supervisor created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Supervisor

  /tool/{toolId}/supervisors:
    parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all supervisors for a tool, in chain format
      operationId: GetToolSupervisorChains
      responses:
        "200":
          description: List of chains with their supervisors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SupervisorChain"
      tags:
        - Supervisor
    post:
      summary: Create new chains with supervisors for a tool
      operationId: CreateToolSupervisorChains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ChainRequest"
      responses:
        "201":
          description: Chains created
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
      tags:
        - Supervisor

  # /tool/{toolId}/request_group:
  #   parameters:
  #     - name: toolId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #         format: uuid
  #   post:
  #     summary: Create a new tool call for a tool
  #     operationId: CreateToolCall
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/ToolCall"
  #     responses:
  #       "201":
  #         description: Request group created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ToolCall"
  #       "400":
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ErrorResponse"
  #     tags:
  #       - ToolCall

  # /run/{runId}/request_groups:
  #   parameters:
  #     - name: runId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #         format: uuid
  #   get:
  #     summary: Get all request groups for a run
  #     operationId: GetRunRequestGroups
  #     responses:
  #       "200":
  #         description: List of request groups
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/ToolRequestGroup"
  # tags:
  #   - ToolCall

  /tool_call/{toolCallId}:
    parameters:
      - name: toolCallId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a tool call
      operationId: GetToolCall
      responses:
        "200":
          description: Tool call
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsteroidToolCall"
        "404":
          description: Tool call not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - ToolCall

  /tool_call/{toolCallId}/status:
    parameters:
      - name: toolCallId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a tool call status
      operationId: GetToolCallStatus
      responses:
        "200":
          description: Tool call
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      tags:
        - ToolCall

  # /tool_request/{toolRequestId}:
  #   parameters:
  #     - name: toolRequestId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #         format: uuid
  #   get:
  #     summary: Get a tool request
  #     operationId: GetToolRequest
  #     responses:
  #       "200":
  #         description: Tool request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ToolRequest"
  #       "404":
  #         description: Tool request not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ErrorResponse"
  #     tags:
  #       - RequestGroup

  /tool/{toolId}:
    parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a tool
      operationId: GetTool
      responses:
        "200":
          description: Tool
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
        "404":
          description: Tool not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Tool

  /project/{projectId}/tools:
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get all tools for a project
      operationId: GetProjectTools
      responses:
        "200":
          description: List of tools
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      tags:
        - Tool

  ? /tool_call/{toolCallId}/chain/{chainId}/supervisor/{supervisorId}/supervision_request
  : parameters:
      - name: toolCallId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: chainId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: supervisorId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Create a supervision request for a supervisor in a chain on a tool call
      operationId: CreateSupervisionRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupervisionRequest"
      responses:
        "201":
          description: Supervision request created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Supervision

  /supervision_request/{supervisionRequestId}/status:
    parameters:
      - name: supervisionRequestId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a supervision request status
      operationId: GetSupervisionRequestStatus
      responses:
        "200":
          description: Get the supervision request status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupervisionStatus"
      tags:
        - Supervision

  /supervision_request/{supervisionRequestId}/result:
    parameters:
      - name: supervisionRequestId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a supervision result
      operationId: GetSupervisionResult
      responses:
        "200":
          description: Get the supervision result for a supervision request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupervisionResult"
      tags:
        - Supervision
    post:
      summary: Create a supervision result for a supervision request
      operationId: CreateSupervisionResult
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupervisionResult"
      responses:
        "201":
          description: Supervision result created
          content:
            application/json:
              schema:
                type: string
                format: uuid
      tags:
        - Supervision

  /run/{runId}:
    parameters:
      - name: runId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a run
      operationId: GetRun
      responses:
        "200":
          description: Run
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        "404":
          description: Run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Run

  /run/{runId}/status:
    parameters:
      - name: runId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get the status of a run
      operationId: GetRunStatus
      responses:
        "200":
          description: Run status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "404":
          description: Run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Run
    put:
      summary: Update the status of a run
      operationId: UpdateRunStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
      responses:
        "204":
          description: Run status updated
      tags:
        - Run

  /run/{runId}/result:
    parameters:
      - name: runId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      summary: Update a run with a result
      operationId: UpdateRunResult
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: string
      responses:
        "201":
          description: Run result created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Run

  /stats:
    get:
      summary: Get hub stats
      operationId: GetHubStats
      responses:
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: Hub stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HubStats"
      tags:
        - Stats

  /supervision_request/{supervisionRequestId}/review_payload:
    parameters:
      - name: supervisionRequestId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get the review payload for a supervision request
      operationId: GetSupervisionReviewPayload
      responses:
        "200":
          description: Review payload for the supervision request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewPayload"
        "404":
          description: Supervision request not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Supervision

  # Unreleased routes
  /run/{run_id}/chat:
    parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Create a new chat completion request from an existing run
      operationId: CreateNewChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AsteroidChat"
      responses:
        "200":
          description: New chat completion created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatIds"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Run

  /run/{run_id}/messages/{index}:
    parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: index
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get the messages for a run
      operationId: GetRunMessages
      responses:
        "200":
          description: Run messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AsteroidMessage"
        "404":
          description: Run not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        - Run

  /run/{run_id}/chat_count:
    parameters:
      - name: run_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Count the number of chat entries for a run
      operationId: GetRunChatCount
      responses:
        "200":
          description: Number of chat entries for the run
          content:
            application/json:
              schema:
                type: integer
      tags:
        - Run

  /tool_call/{toolCallId}/state:
    parameters:
      - name: toolCallId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get the state of a tool call
      operationId: GetToolCallState
      responses:
        "200":
          description: Tool call state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunExecution"
      tags:
        - ToolCall

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        details:
          type: string
      required:
        - error

    RunState:
      type: array
      items:
        $ref: "#/components/schemas/RunExecution"

    RunExecution:
      type: object
      properties:
        toolcall:
          $ref: "#/components/schemas/AsteroidToolCall"
        chains:
          type: array
          items:
            $ref: "#/components/schemas/ChainExecutionState"
        status:
          $ref: "#/components/schemas/Status"
      required:
        - toolcall
        - chains
        - status

    ChainExecutionState:
      type: object
      properties:
        chain:
          $ref: "#/components/schemas/SupervisorChain"
        chain_execution:
          $ref: "#/components/schemas/ChainExecution"
        supervision_requests:
          type: array
          items:
            $ref: "#/components/schemas/SupervisionRequestState"
      required:
        - chain
        - supervision_requests
        - chain_execution

    ChainExecution:
      type: object
      properties:
        id:
          type: string
          format: uuid
        toolcall_id:
          type: string
          format: uuid
        chain_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
      required:
        - id
        - toolcall_id
        - chain_id
        - created_at

    SupervisionRequestState:
      type: object
      properties:
        supervision_request:
          $ref: "#/components/schemas/SupervisionRequest"
        status:
          $ref: "#/components/schemas/SupervisionStatus"
        result:
          $ref: "#/components/schemas/SupervisionResult"
      required:
        - supervision_request
        - status

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        run_result_tags:
          type: array
          items:
            type: string
      required:
        - name
        - created_at
        - id
        - run_result_tags

    Run:
      type: object
      properties:
        id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/Status"
        result:
          type: string
      required:
        - id
        - task_id
        - created_at

    Tool:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
        ignored_attributes:
          type: array
          items:
            type: string
        code:
          type: string
      required:
        - run_id
        - name
        - description
        - attributes
        - code

    Supervisor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/SupervisorType"
        code:
          type: string
        attributes:
          type: object
      required:
        - name
        - description
        - created_at
        - type
        - code
        - attributes

    ChainRequest:
      type: object
      properties:
        supervisor_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Array of supervisor IDs to create chains with

    SupervisorChain:
      type: object
      properties:
        chain_id:
          type: string
          format: uuid
        supervisors:
          type: array
          items:
            $ref: "#/components/schemas/Supervisor"
      required:
        - chain_id
        - supervisors

    MessageType:
      type: string
      enum: [text, audio, image, image_url]

    SupervisionRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chainexecution_id:
          type: string
          format: uuid
        supervisor_id:
          type: string
          format: uuid
        position_in_chain:
          type: integer
        status:
          $ref: "#/components/schemas/SupervisionStatus"
      required:
        - supervisor_id
        - position_in_chain

    SupervisionStatus:
      type: object
      properties:
        id:
          type: integer
        supervision_request_id:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/Status"
        created_at:
          type: string
          format: date-time
      required:
        - id
        - status
        - created_at

    SupervisionResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        supervision_request_id:
          type: string
          format: uuid
        toolcall_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        decision:
          $ref: "#/components/schemas/Decision"
        reasoning:
          type: string
      required:
        - supervision_request_id
        - created_at
        - decision
        - reasoning

    Status:
      type: string
      enum: [pending, completed, failed, assigned, timeout]

    Decision:
      type: string
      enum: [approve, reject, terminate, modify, escalate]

    SupervisorType:
      type: string
      description: The type of supervisor. ClientSupervisor means that the supervision is done client side and the server is merely informed. Other supervisor types are handled serverside, e.g. HumanSupervisor means that a human will review the request via the Asteroid UI.
      enum: [client_supervisor, human_supervisor, no_supervisor]

    HubStats:
      type: object
      properties:
        connected_clients:
          type: integer
        free_clients:
          type: integer
        busy_clients:
          type: integer
        assigned_reviews:
          type: object
          additionalProperties:
            type: integer
        review_distribution:
          type: object
          additionalProperties:
            type: integer
        completed_reviews_count:
          type: integer
        pending_reviews_count:
          type: integer
        assigned_reviews_count:
          type: integer
      required:
        - connected_clients
        - queued_reviews
        - stored_reviews
        - free_clients
        - busy_clients
        - assigned_reviews
        - review_distribution
        - completed_reviews_count
        - pending_reviews_count
        - assigned_reviews_count

    MessageRole:
      type: string
      enum: [system, user, assistant]

    ReviewPayload:
      type: object
      description: Contains all the information needed for a human reviewer to make a supervision decision
      properties:
        supervision_request:
          $ref: "#/components/schemas/SupervisionRequest"
          description: The current supervision request being reviewed
        chain_state:
          $ref: "#/components/schemas/ChainExecutionState"
          description: The state of the entire supervision chain, including previous supervision results
        toolcall:
          $ref: "#/components/schemas/AsteroidToolCall"
          description: The tool call being supervised
        run_id:
          type: string
          format: uuid
          description: The ID of the run this review is for
        messages:
          type: array
          items:
            $ref: "#/components/schemas/AsteroidMessage"
          description: The messages in the run
      required:
        - supervision_request
        - chain_state
        - toolcall
        - run_id
        - messages

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - project_id
        - name
        - created_at

    AsteroidChat:
      description: The raw b64 encoded JSON of the request and response data sent/received from the LLM.
      type: object
      properties:
        request_data:
          type: string
          format: base64
        response_data:
          type: string
          format: base64
        format:
          $ref: "#/components/schemas/ChatFormat"
      required:
        - request_data
        - response_data
        - format

    ChatFormat:
      type: string
      enum: [openai, anthropic]

    AsteroidMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [system, user, assistant, function, tool, asteroid]
        content:
          type: string
        tool_calls:
          type: array
          items:
            $ref: "#/components/schemas/AsteroidToolCall"
        type:
          description: The type of content in the message, either text or b64 encoded audio
          $ref: "#/components/schemas/MessageType"
        created_at:
          type: string
          format: date-time
        data:
          type: string
          format: base64
          description: The raw b64 encoded JSON of the message objects in its original form
      required:
        - role
        - content

    AsteroidToolCall:
      type: object
      properties:
        id:
          type: string
          format: uuid
        call_id:
          type: string
        tool_id:
          type: string
          format: uuid
        name:
          type: string
        arguments:
          type: string
          description: Arguments in JSON format
        created_at:
          type: string
          format: date-time
      required:
        - id
        - tool_id
        - type
        - function

    AsteroidChoice:
      type: object
      properties:
        asteroid_id:
          type: string
        index:
          type: integer
        message:
          $ref: "#/components/schemas/AsteroidMessage"
        finish_reason:
          type: string
          enum: [stop, length, function_call, tool_calls, content_filter, null]
      required:
        - asteroid_id
        - index
        - message
        - finish_reason

    ChatIds:
      type: object
      properties:
        chat_id:
          type: string
          format: uuid
        choice_ids:
          type: array
          items:
            $ref: "#/components/schemas/ChoiceIds"
      required:
        - chat_id
        - choice_ids

    ChoiceIds:
      type: object
      properties:
        choice_id:
          type: string
        message_id:
          type: string
        tool_call_ids:
          type: array
          # Each item is a Tool call ID along with the Tool ID
          items:
            $ref: "#/components/schemas/ToolCallIds"
      required:
        - choice_id
        - message_id
        - tool_call_ids

    ToolCallIds:
      type: object
      properties:
        tool_call_id:
          type: string
        tool_id:
          type: string
